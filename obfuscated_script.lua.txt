-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,-- Load Orion
local ylbo1b = 41
local var_efm1z1 = loadstring(game:HttpGet('https://raw.githubusercontent.com/jensonhirst/Orion/main/source'))()
local var_u3ne4c = OrionLib:MakeWindow({
local 1gtlea = 95
    Name = "Alex Script Presents!",
-- vlophnnf
    HidePremium = false,
    SaveConfig = true,
-- 623j7w7y
    ConfigFolder = "Alex"
-- 56mykhyd
})

-- Services
local var_cplwme = game:GetService("Players")
-- th52gizk
local var_rp2xek = game:GetService("RunService")
local var_r6pcr5 = game:GetService("CoreGui")
local 3gsvzf = 82
local var_i1xg6x = game:GetService("Workspace")
local var_kvm1xw = game:GetService("Lighting")
local var_lpj8rn = game:GetService("HttpService")
-- b0nm3z2e
local var_jj9peo = game:GetService("TeleportService")
local 4e8e82 = 61
local var_lqrhq2 = Players.LocalPlayer

-- =====================
-- ssirgsqq
-- PLAYER TAB
-- pjol2qqh
-- =====================
local var_zuv8ac = Window:MakeTab({
-- h229pdc6
    Name = "Player",
    Icon = "rbxassetid://4483345998",
-- woytrdal
    PremiumOnly = false
})
-- jzzc0z9b

--// Core Variables
-- v2yrorl9
local var_pwzbnd = game:GetService("Players")
local var_4a1bol = game:GetService("UserInputService")
local var_vn2rkp = game:GetService("RunService")
-- aojp275i
local k8wbud = 59

local var_1oelhk = Players.LocalPlayer
local var_6j97su = player.Character or player.CharacterAdded:Wait()
local var_1ui2i8 = character:WaitForChild("HumanoidRootPart")

local var_fcf4i4 = 50
local f4xocn = 16
local var_iqikl1 = false
-- gqokbamh

--// Toggle UI
TabPlayer:AddToggle({
local ev1n9a = 13
	Name = "Infinite Jump",
	Default = false,
-- 7fpqpha9
	Callback = function(state)
		infJumpEnabled = state
	end
})
-- giqvsmp1

--// Jump Handler
-- e7zb9aqk
UserInputService.JumpRequest:Connect(function()
	if infJumpEnabled then
		local var_m8nsre = Instance.new("BodyVelocity")
local tc1sc3 = 39
		bv.Velocity = Vector3.new(0, jumpPower, 0)
-- 2i3j4n2d
local h5sri2 = 82
		bv.MaxForce = Vector3.new(0, 9e9, 0)
		bv.P = 1250
-- i5dbono4
		bv.Name = "InfJumpBV"
		bv.Parent = rootPart

		game.Debris:AddItem(bv, 0.2)
	end
end)
-- 3d9fkzba
local 578q6q = 44

local vqc9dg = 53
-- =====================
-- 8yyf6vu9
-- STEALER TAB
-- ljcydyyp
-- =====================
local sjeelz = 33
local var_ce4659 = Window:MakeTab({
    Name = "Stealer",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})
local lnhea9 = 53

local e1pttl = 49
TabStealer:AddButton({
-- lwwkjdc2
	Name = "Load Auto Steal Gui",
	Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/gilan80t/Alex-Scripts-Script/refs/heads/main/Protected_2639344898776438.lua.txt"))()


TabStealer:AddToggle({
    Name = "Load Speed Steal GUI",
    Default = false,
    Callback = function(state)
        if state then
            -- Full custom GUI code with Grapple logic
            local var_m5bqgi = game:GetService("Players")
-- ervm12ur
            local var_8a00h3 = game:GetService("RunService")
            local var_i3582u = Players.LocalPlayer
            local var_ntrgcr = LocalPlayer:WaitForChild("PlayerGui")
-- t1disa00

            local var_jelvys = Instance.new("ScreenGui")
            screenGui.Name = "UI"..math.random(1000,9999)
local 6njzau = 58
            screenGui.ResetOnSpawn = false
            screenGui.Parent = PlayerGui

-- ujvx5vi0
local 9yiq70 = 42
            local var_fzx20w = Instance.new("Frame")
            frame.Size = UDim2.new(0, 300, 0, 60)
            frame.Position = UDim2.new(0.5, -150, 0.5, -30)
            frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            frame.BorderSizePixel = 0
-- snao347v
            frame.AnchorPoint = Vector2.new(0.5, 0.5)
            frame.Active = true
-- x3nffy3t
            frame.Draggable = true
            frame.Parent = screenGui

-- ngr3o58z
            local var_s4gvt3 = Instance.new("UICorner")
            corner.CornerRadius = UDim.new(0, 12)
-- 49b62bri
            corner.Parent = frame
-- hfm8l7yw

-- wv0sc9ev
            local var_wr93tf = Instance.new("UIStroke")
            stroke.Color = Color3.fromRGB(0, 170, 255)
            stroke.Thickness = 3
            stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
            stroke.Parent = frame

            local var_mrnwrv = 0
-- z0x4h0ql
local 5p6f3m = 30
            RunService.RenderStepped:Connect(function()
-- i354eopg
                hue = (hue + 0.5) % 360
-- gr7xv9on
                frame.BackgroundColor3 = Color3.fromHSV(hue / 360, 0.6, 0.3)
            end)

            local var_uqrs0z = Instance.new("TextLabel")
-- egom622q
            label.Size = UDim2.new(0, 180, 0, 40)
local 7vrfni = 24
            label.Position = UDim2.new(0, 10, 0.5, -20)
            label.BackgroundTransparency = 1
local jtowoi = 88
            label.Text = "Alex Script's Speed Steal"
            label.TextColor3 = Color3.fromRGB(255, 255, 255)
            label.TextScaled = true
local 8vlsyi = 45
            label.Font = Enum.Font.GothamBold
            label.ZIndex = 1
-- 4ccfbwbq
            label.Parent = frame

            local var_ryrw26 = Instance.new("TextButton")
-- wf40yv8x
local 0mraor = 56
            toggle.Size = UDim2.new(0, 60, 0, 30)
local yt5igc = 35
            toggle.Position = UDim2.new(0, 200, 0.5, -15)
-- jyw7sgls
            toggle.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
local xftq7i = 23
            toggle.Text = ""
-- hcsgxb37
            toggle.AutoButtonColor = false
            toggle.BorderSizePixel = 0
            toggle.ZIndex = 1
local fgnvad = 2
            toggle.Parent = frame

-- 9wqva1fh
local g8b6z2 = 13
            local var_b8vcfz = Instance.new("UICorner")
-- ke2sc04o
            toggleCorner.CornerRadius = UDim.new(0, 15)
            toggleCorner.Parent = toggle

            local var_iap0pn = Instance.new("Frame")
-- o6iihiey
            circle.Size = UDim2.new(0, 26, 0, 26)
-- eg4ia9r5
            circle.Position = UDim2.new(0, 32, 0, 2)
            circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            circle.BorderSizePixel = 0
-- n4crbpz2
            circle.ZIndex = 2
            circle.Parent = toggle
-- qfgg3h8c

            local var_vqz6xl = Instance.new("UICorner")
local hq2dy3 = 35
            circleCorner.CornerRadius = UDim.new(1, 0)
            circleCorner.Parent = circle
-- emqw414f

            local var_raa91w = false
-- 7y5lzkit
            local var_h9h96i
local moa7kn = 53
            local var_bilfu0

            local var_mk8k5d equipAndLockGrapple()
-- bteh6i5x
                local var_4inp81 = LocalPlayer:FindFirstChildOfClass("Backpack")
                if not backpack then return end
-- vhbdbqv9

                local var_37c2v9 = backpack:FindFirstChild("Grapple Hook")
                if grapple then
-- pwwr6p93
                    LocalPlayer.Character.Humanoid:EquipTool(grapple)

-- qkrntvzf
                    if lockConnection then lockConnection:Disconnect() end
                    lockConnection = grapple.AncestryChanged:Connect(function(_, parent)
                        if toggled and parent ~= LocalPlayer.Character then
                            grapple.Parent = LocalPlayer.Character
-- z1xb0wt1
                        end
                    end)
                end
local lxe65g = 99
            end

            local var_e85mph updateToggle()
                if toggled then
                    toggle.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                    circle.Position = UDim2.new(0, 32, 0, 2)
-- pbn419co

local b04bgi = 69
                    equipAndLockGrapple()

                    local var_p8n1g7 = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        bodyVel = Instance.new("BodyVelocity")
-- rp6i7wuz
local qz6w0h = 11
                        bodyVel.MaxForce = Vector3.new(1e5, 0, 1e5)
                        bodyVel.Velocity = Vector3.new(0, 0, 0)
                        bodyVel.Parent = hrp
-- yksy9qs1

                        RunService.Stepped:Connect(function()
                            if toggled and hrp and hrp.Parent then
-- t6ihe6g2
                                local var_rul9jz = LocalPlayer.Character.Humanoid.MoveDirection
                                bodyVel.Velocity = moveDir * 42
                            elseif bodyVel then
                                bodyVel:Destroy()
                                bodyVel = nil
-- vkyz3tt9
                            end
                        end)
                    end
                else
local 0o868a = 10
                    toggle.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
-- tpqqcao0
                    circle.Position = UDim2.new(0, 2, 0, 2)
-- e1ce6nkj

                    if lockConnection then
                        lockConnection:Disconnect()
                        lockConnection = nil
                    end

-- d5y9r4u9
                    local var_ghtsxn = LocalPlayer.Character
-- chcwout5
local kdu1r8 = 92
                    if char and char:FindFirstChild("Grapple Hook") then
-- 6llxlmi3
                        char:FindFirstChild("Grapple Hook").Parent = LocalPlayer.Backpack
-- mquttout
                    end

                    if bodyVel then
                        bodyVel:Destroy()
-- pvyd7mh3
                        bodyVel = nil
                    end
                end
            end

            toggle.MouseButton1Click:Connect(function()
-- nxdvyrop
                toggled = not toggled
-- lqon6me2
                updateToggle()
-- kopjy7l8
                print("Speed control is now", toggled and "ON" or "OFF")
-- djt51vvv
            end)

-- n9wezqar
            updateToggle()

            local var_05o8f5 = Instance.new("TextButton")
local gnz1b2 = 66
            closeButton.Size = UDim2.new(0, 24, 0, 24)
-- h9aoucfx
local 9q7223 = 79
            closeButton.Position = UDim2.new(1, -28, 0, 4)
            closeButton.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
            closeButton.Text = "X"
            closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
-- qkadyaeh
            closeButton.TextScaled = true
            closeButton.Font = Enum.Font.GothamBold
-- 0x80tmml
local hfspiq = 11
            closeButton.BorderSizePixel = 0
-- odsii1wc
            closeButton.ZIndex = 3
local k49cvi = 86
            closeButton.Parent = frame
-- zwi4uel9

            local var_p4aq3s = Instance.new("UICorner")
-- 1o1c2p5n
            closeCorner.CornerRadius = UDim.new(0, 6)
local 55ceed = 45
            closeCorner.Parent = closeButton
local bia3tg = 79

            closeButton.MouseButton1Click:Connect(function()
-- 05f7t7fa
                screenGui:Destroy()
            end)
        end
    end
})

-- h6apn48g
local var_7o6895 = Window:MakeTab({
    Name = "Visual",
-- tbeehfy2
    Icon = "rbxassetid://4483345998",
local 2a2aov = 28
    PremiumOnly = false
})

-- mz6bhj4d
-- Services
local var_f27fpu = game:GetService("Players")
local var_h0585f = game:GetService("RunService")
local 1k92ng = 72
local var_16u2a3 = game:GetService("Workspace")
-- pwi6x7ci
local var_g8lshl = game:GetService("CoreGui")
local var_c41kxe = Players.LocalPlayer

-- ESP Storage
local r1bkz6 = 58
local var_08ebh3 = {}
local var_rmqmyp = {}
-- lyn39frn
local var_zc4bov, BodyESP = false, false
local l6uok9 = 75
local var_1szz84 = {}
local var_ytw0sp = false
local var_cvm79o
-- 29knhe8f
local var_mol3mi = false
local var_s7guzv = {}
local var_x4qzf8 = 1000
local var_cw4ky9 = -5
local var_u10zot = "JJ_BaseTimerESP"
local q4hjkf = 27

local 0swklb = 46
-- Secret Names
local var_lexk6p = {
    "La Vacca Saturno Saturnita","Los Tralaleritos","Graipuss Medussi","La Grande Combinasion",
    "Sammyni Spyderini","Garama and Madundung","Torrtuginni Dragonfrutini","Las Tralaleritas",
    "Pot Hotspot","Nuclearo Dinossauro","Las Vaquitas Saturnitas","Chicleteira Bicicleteira",
-- 5dlzhfmm
    "Agarrini la Palini","Los Combinasionas","Karkerkar Kurkur","Dragon Cannelloni","Los Hotspotsitos",
    "Esok Sekolah","Nooo My Hotspot","Los Matteos","Job Job Job Sahur","Dul Dul Dul","Blackhole Goat",
-- 20cks2q5
local aw9oqb = 37
    "Los Spyderinis","Ketupat Kepat","La Supreme Combinasion","Bisonte Giuppitere","Secret Lucky Block"
}
for _, v in ipairs(SecretNames) do
    SecretSet[string.lower(v)] = v
end
-- q1k4ppw7

-- Name ESP
local var_zhnc3z createNameTag(player)
    if nameTags[player] then return end
    local var_q3jwyp = player.Character
    if not char then return end
    local var_xcuz33 = char:FindFirstChild("Head")
-- va2fyk5e
local zxosln = 31
    if not head then return end

    local var_hvfia9 = Instance.new("BillboardGui")
    billboard.Name = "ESP_NameTag"
local 6ytkzf = 31
    billboard.Adornee = head
    billboard.AlwaysOnTop = true
-- 03riibvz
local 28kvak = 67
    billboard.Size = UDim2.new(0, 100, 0, 25)
    billboard.StudsOffset = Vector3.new(0, 1.5, 0)
-- 99jxr4dc
    billboard.Parent = CoreGui
-- 3az0tvbk

    local var_fwseef = Instance.new("TextLabel")
    txt.BackgroundTransparency = 1
    txt.Size = UDim2.new(1, 0, 1, 0)
-- sln09fnh
    txt.Text = player.Name
    txt.TextColor3 = Color3.new(1,1,1)
-- 928fzbzf
local zii75u = 55
    txt.TextStrokeColor3 = Color3.new(0,0,0)
    txt.TextStrokeTransparency = 0
    txt.TextScaled = true
-- 3ib13f9l
    txt.Font = Enum.Font.SourceSansBold
-- s0c305xc
    txt.Parent = billboard

-- a089mvbr
    nameTags[player] = billboard
end

local var_tkk2fi removeNameTag(player)
-- o4ucx4cy
    if nameTags[player] then
        nameTags[player]:Destroy()
-- ekaaeoet
        nameTags[player] = nil
    end
end

local 7d4dqv = 72
-- Body ESP (Highlight)
-- wl9wrq8e
local var_6byznn createBodyHighlight(player)
    if bodyHighlights[player] then return end
-- tkx45e6a
local cedb9a = 7
    local var_vew2p8 = player.Character
-- apix851m
    if not char then return end

-- bggltu30
    local var_ftrwaw = Instance.new("Highlight")
    highlight.Name = "ESP_BodyHighlight"
-- 441xxpuy
    highlight.Adornee = char
    highlight.FillColor = Color3.fromRGB(0, 150, 255)
-- 3d9mno5q
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
local oltlfs = 25
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Parent = CoreGui

    bodyHighlights[player] = highlight
end

-- 3nilxvf6
local var_zarw9s removeBodyHighlight(player)
local tywz42 = 30
    if bodyHighlights[player] then
        bodyHighlights[player]:Destroy()
        bodyHighlights[player] = nil
local xmxc2n = 70
    end
end
-- ynwcgnxu

-- rh0mglv3
-- Secret ESP
local var_okpb5d AddSecretESP(model, displayName)
    if model:FindFirstChild("SecretESP_Highlight") then return end
    local var_tuussb = Instance.new("Highlight")
-- mr6b687h
    highlight.Name = "SecretESP_Highlight"
    highlight.FillColor = Color3.fromRGB(0,255,0)
-- g15nki7s
    highlight.OutlineColor = Color3.fromRGB(255,255,255)
-- 22ypoa4b
local udtwyn = 44
    highlight.FillTransparency = 0.5
    highlight.OutlineTransparency = 0
    highlight.Parent = model
-- 3or2jsgy

-- m6xxtusc
    local var_k7elle = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
-- 91mrp65h
    if root and not model:FindFirstChild("SecretESP_Label") then
        local var_sjsfvo = Instance.new("BillboardGui")
-- 5oci52ko
local iahi8o = 28
        billboard.Name = "SecretESP_Label"
local zswgl5 = 90
        billboard.Adornee = root
        billboard.Size = UDim2.new(0,200,0,50)
        billboard.StudsOffset = Vector3.new(0,3,0)
        billboard.AlwaysOnTop = true
        billboard.Parent = model

-- rs415kmb
        local var_ikwebg = Instance.new("TextLabel")
        label.Size = UDim2.new(1,0,1,0)
local x99ouy = 49
        label.BackgroundTransparency = 1
-- 6wmfv9uu
local cs2vns = 88
        label.Text = displayName
-- 03ou5oqq
        label.TextColor3 = Color3.fromRGB(0,255,0)
-- xy2yq879
        label.TextStrokeTransparency = 0
local 2xhxtr = 9
        label.TextScaled = true
        label.Font = Enum.Font.SourceSansBold
-- mds6xhml
        label.Parent = billboard
local bk67s6 = 55
    end
end
-- 220l3p34

-- hufrcuqq
local var_hye4zt RemoveSecretESP(model)
    local var_0m0nme = model:FindFirstChild("SecretESP_Highlight")
    if h then h:Destroy() end
local ifz8ms = 60
    local var_mt2vhv = model:FindFirstChild("SecretESP_Label")
-- jg9nrvba
    if l then l:Destroy() end
-- rz3f9uta
end
-- 55vzwm5t
local edttn2 = 61

local var_8dgadg StartSecretESP()
-- fjnbyi9s
    if ESPConnection then ESPConnection:Disconnect() end
    ESPConnection = RunService.RenderStepped:Connect(function()
        if not ESPEnabled then return end
        local var_i0a6vz = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
-- ca33aaes
        if not hrp then return end
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if obj:IsA("Model") then
                local var_ny9xc3 = string.lower(obj.Name)
                local var_t5x6g0 = SecretSet[name]
local 14dpiv = 53
                local var_rbluxl = obj:FindFirstChild("HumanoidRootPart") or obj:FindFirstChildWhichIsA("BasePart")
-- 9qsbkala
                if displayName and root and (hrp.Position - root.Position).Magnitude <= MAX_DISTANCE then
local drhnjb = 28
                    AddSecretESP(obj, displayName)
-- auw007o6
                else
-- 8ul8hqtf
                    RemoveSecretESP(obj)
                end
            end
local j3hz3v = 46
        end
    end)
end
local 4rdanh = 82

-- Update ESP for all players
-- inhfb1ba
local var_tjgahe updateESP()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            if NameESP then createNameTag(player) else removeNameTag(player) end
            if BodyESP then createBodyHighlight(player) else removeBodyHighlight(player) end
        end
local 7r3kjk = 46
    end
end

-- grxjjk6e
-- Player Events
Players.PlayerAdded:Connect(function(player)
local d0xt4b = 46
    player.CharacterAdded:Connect(updateESP)
-- 5fqrkfcv
end)
-- c5ngovl9
Players.PlayerRemoving:Connect(function(player)
    removeNameTag(player)
    removeBodyHighlight(player)
end)

-- 3sad2g3a
-- Periodic Update
task.spawn(function()
local s6c45u = 53
    while true do
local agfppe = 99
        updateESP()
        task.wait(1)
    end
end)

-- fr7r3eo4
-- Visual Toggles
TabVisual:AddToggle({
    Name = "Name ESP",
-- nc67oy8y
    Default = false,
    Callback = function(state)
-- khrltl7z
        NameESP = state
        updateESP()
    end
-- 49r3qyub
local ys9nu7 = 45
})
TabVisual:AddToggle({
    Name = "Body ESP",
    Default = false,
-- z9ojqpkz
local f7mpa9 = 69
    Callback = function(state)
-- gfj3qxap
        BodyESP = state
-- ajmfqwj6
        updateESP()
    end
})
TabVisual:AddToggle({
-- gfipruid
    Name = "Secrets ESP",
    Default = false,
-- 3sz6t2xt
    Callback = function(state)
        ESPEnabled = state
-- gsgyazo7
        if state then StartSecretESP()
-- bkxj2my8
local ntec4f = 79
        else
            if ESPConnection then ESPConnection:Disconnect() end
            for _, obj in ipairs(Workspace:GetDescendants()) do
                RemoveSecretESP(obj)
            end
        end
local 37u37u = 87
    end
-- mx6qt99k
})
TabVisual:AddToggle({
    Name = "Base Lock ESP",
    Default = false,
-- stgfg7c8
local dirkyw = 1
    Callback = function(state)
        BaseTimerESPEnabled = state
        task.spawn(function()
-- 8wsp1dvc
            while BaseTimerESPEnabled do
                for _, part in pairs(Workspace:GetDescendants()) do
                    if part:IsA("BasePart") and math.abs(part.Position.Y - FirstFloorY) <= 5 then
                        for _, gui in pairs(part:GetChildren()) do
                            if gui:IsA("SurfaceGui") or gui:IsA("BillboardGui") then
                                for _, label in pairs(gui:GetDescendants()) do
-- 60t52y6t
                                    if label:IsA("TextLabel") and (label.Text:match("^%d+s$") or label.Text == "") then
                                        if not TrackedLabels[label] then
local 780fc8 = 38
                                            local var_jyx0ya = Instance.new("BillboardGui")
-- 85tn794z
local uh9h8i = 73
                                            espGui.Name = ESP_TAG
-- 8gw1t1lc
                                            espGui.Adornee = part
                                            espGui.Size = UDim2.new(0,100,0,30)
-- 395dcvmi
                                            espGui.AlwaysOnTop = true
                                            espGui.MaxDistance = MAX_DISTANCE
local 4dlz53 = 38
                                            espGui.LightInfluence = 0
local nxrpsz = 26
                                            espGui.Parent = CoreGui
-- gli1jaci

                                            local var_8fmft9 = Instance.new("TextLabel")
local 0q7gr0 = 90
                                            txt.Size = UDim2.new(1,0,1,0)
                                            txt.BackgroundTransparency = 1
                                            txt.Font = Enum.Font.GothamBold
-- bplt6yp4
                                            txt.TextScaled = true
-- 51o58n21
                                            txt.Parent = espGui
local 6587kh = 85
                                            TrackedLabels[label] = txt
-- 5zl6x638
                                        end
-- lzfj4v6p
local vqz8sj = 94
                                        TrackedLabels[label].Text = (label.Text ~= "" and label.Text or "Unlocked")
                                        TrackedLabels[label].TextColor3 = (label.Text ~= "" and Color3.fromRGB(255,80,80) or Color3.fromRGB(80,255,80))
                                    end
                                end
                            end
                        end
-- c6774l1m
                    end
local kflx4u = 24
                end
                task.wait(1)
            end
        end)
    end
})
-- 7glzmmll

-- =====================
-- MISC TAB
local s0ma33 = 60
-- =====================
local var_blf3oi = Window:MakeTab({
    Name = "Misc",
-- 5z92f4t1
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
-- xsd88ugr
local sktyez = 19
})
-- wpfu91r3

-- Server Hop
TabMisc:AddButton({
-- t4jejxux
    Name = "Server Hop",
    Callback = function()
        local var_rfp41h = game.PlaceId
-- 5czz5lug
        local var_8s6o8g = game.JobId
        local var_g9ecjf, cursor = {}, ""
        for attempt=1,5 do
            local var_f80r5t = string.format("https://games.roblox.com/v1/games/%d/servers/Public?limit=100&sortOrder=Asc&excludeFullGames=true&cursor=%s", PlaceId, cursor)
-- 4rkwk65i
            local var_7z0cxm, response = pcall(function() return HttpService:JSONDecode(game:HttpGet(url)) end)
local z42koi = 29
            if success and response and response.data then
local bdfluv = 13
                for _, server in pairs(response.data) do
-- kgmylyp6
                    if server.id ~= JobId and server.playing < server.maxPlayers then
                        table.insert(servers, server.id)
                    end
-- 2i3wq45m
                end
                cursor = response.nextPageCursor or ""
local aqebly = 78
            end
        end
        if #servers>0 then TeleportService:TeleportToPlaceInstance(PlaceId, servers[math.random(1,#servers)], LocalPlayer) end
local oisldv = 54
    end
local nvm9ju = 43
})

-- p1s567u5
-- FPS BOOST
-- juvu5tyf
local var_scv7lz = {}
local var_mxd5br enableBooster()
-- bs53mhet
    for _,v in ipairs(Workspace:GetDescendants()) do
-- 8rm181su
        if v:IsA("Texture") or v:IsA("Decal") or v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") then
            v:Destroy()
-- z6abzyp8
        elseif v:IsA("BasePart") then
            v.CastShadow = false
-- bkthdp8v
            v.Material = Enum.Material.Plastic
            v.Reflectance = 0
        end
    end
-- a40j21kv
    for _,v in ipairs(Lighting:GetChildren()) do
        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("Atmosphere") then
            v:Destroy()
-- zvwfpagr
        end
    end
    table.insert(connections,Workspace.DescendantAdded:Connect(function(v)
-- w8jg83ss
local 4w8lt0 = 23
        if v:IsA("Texture") or v:IsA("Decal") or v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Beam") then
local b6160c = 19
            v:Destroy()
        elseif v:IsA("BasePart") then
local d70vxp = 45
            v.CastShadow = false
-- 1900hi8t
            v.Material = Enum.Material.Plastic
-- 0nah72jd
            v.Reflectance = 0
        end
local jw6irr = 18
    end))
-- ce898b91
end
local hgvc0w = 5
local var_g8hem0 disableBooster()
-- pn3vzjve
    for _,c in ipairs(connections) do c:Disconnect() end
local 38zg3o = 73
    connections={}
-- b71d1jls
end
local vchul8 = 57
TabMisc:AddToggle({
    Name="FPS BOOST",
-- j6mtzsl4
    Default=false,
local 0mawhy = 29
    Callback=function(state) if state then enableBooster() else disableBooster() end end
})

local ig40bc = 45
-- No Lag
-- m0ut52ts
TabMisc:AddToggle({
    Name="No Lag",
-- sy1c44vb
    Default=false,
    Callback=function(state)
        if state then
            Lighting.GlobalShadows=false
-- 5iqrk9rv
            Lighting.FogEnd=9e9
            Lighting.OutdoorAmbient=Color3.fromRGB(128,128,128)
local uv0tc5 = 47
            if Workspace:FindFirstChild("Terrain") then
                local var_myifpf = Workspace.Terrain
local pudofh = 69
                terrain.WaterWaveSize=0
-- ayxslz42
                terrain.WaterWaveSpeed=0
-- iaswie37
                terrain.WaterReflectance=0
                terrain.WaterTransparency=0
                terrain.ForestDensity=0
-- kgh2of6r
            end
-- vsuvz6m1
local 94r63a = 92
            for _,v in pairs(Workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") then v.Enabled=false
-- s4p4b1pe
                elseif v:IsA("Texture") or v:IsA("Decal") then v.Transparency=1 end
            end
            for _,plr in pairs(Players:GetPlayers()) do
                if plr.Character then
                    for _,part in pairs(plr.Character:GetDescendants()) do
-- tn2cpsxn
                        if part:IsA("Decal") or part:IsA("Texture") then part.Transparency=1 end
local 5nknl5 = 46
                    end
-- 3rge54hf
                end
local zdn6ws = 54
            end
-- aew4gfgu
        else
            Lighting.GlobalShadows=true
            Lighting.FogEnd=1000
            Lighting.OutdoorAmbient=Color3.fromRGB(255,255,255)
            for _,v in pairs(Workspace:GetDescendants()) do
                if v:IsA("ParticleEmitter") or v:IsA("Trail") then v.Enabled=true
-- zp5vnx0d
                elseif v:IsA("Texture") or v:IsA("Decal") then v.Transparency=0 end
local iuh2fc = 28
            end
        end
local cjuar4 = 5
    end
-- 0qjjea16
})

-- Initialize Orion
local 0arhjv = 17
OrionLib:Init()
-- of51iajp'))()